{"version":3,"sources":["reusables/ListItem.js","reusables/List.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","_ref","item","react_default","a","createElement","date","Date","now","diffDays","Math","round","getTime","getDate","getMonth","getFullYear","formatDate","price","face","List","items","map","reusables_ListItem","key","id","ticking","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nav","React","createRef","handleScroll","window","scrollY","requestAnimationFrame","console","log","state","data","pageLoaded","addEventListener","pointer","axios","get","then","response","setState","catch","error","_this2","reusables_List","ref","Component","App","Home_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAiCeA,EARE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACfC,EAAAC,EAAAC,cAAA,mBAxBiB,SAACC,GAClBA,EAAO,IAAIC,KAAKD,GAChB,IAAIE,EAAM,IAAID,KAAKA,KAAKC,OAKpBC,EAAWC,KAAKC,OAAOH,EAAII,UAAYN,EAAKM,WAJnC,OAKb,OAAe,GAAZH,EAEc,IADfA,EAAWC,KAAKC,OAAOH,EAAII,UAAYN,EAAKM,WALhC,OAQK,IADfH,EAAWC,KAAKC,OAAOH,EAAII,UAAYN,EAAKM,WANhC,MAOwBH,EAAW,cAC5B,GAAZA,EAAgB,MAAQA,GAAsB,eAEhCA,GAAJ,GAAZA,EAAsC,YAAoC,aAE3EA,EAAW,EACCH,EAAKO,UAAY,KAAOP,EAAKQ,WAAa,GAAK,IAAMR,EAAKS,cAElDN,GAAJ,GAAZA,EAAsC,WAAkC,YAK3EO,CAAWd,EAAKI,MADzB,IACgCH,EAAAC,EAAAC,cAAA,WADhC,UAEUH,EAAKe,MAFf,IAEsBd,EAAAC,EAAAC,cAAA,WAFtB,SAGSH,EAAKgB,OCpBDC,EANF,SAAAlB,GAAA,IAAGmB,EAAHnB,EAAGmB,MAAH,OACXjB,EAAAC,EAAAC,cAAA,UACGe,EAAMC,IAAK,SAACnB,GAAD,OAAUC,EAAAC,EAAAC,cAACiB,EAAD,CAAUC,IAAKrB,EAAKsB,GAAItB,KAAMA,QCApDuB,GAAU,EAEOC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA4BRQ,IAAMC,IAAMC,YA7BOT,EA+BnBU,aAAe,WACCC,OAAOC,QAEhBf,IACHc,OAAOE,sBAAsB,WAC3BC,QAAQC,IAAI,eAEZlB,GAAU,IAGZA,GAAU,IAvCZG,EAAKgB,MAAQ,CACXC,KAAM,CAAC,CAAC5B,MAAO,IAAKX,KAAM,OAAQY,KAAM,WACxC4B,YAAY,GAJGlB,oFAUjBW,OAAOQ,iBAAiB,SAAUhB,KAAKO,cACvCI,QAAQC,IAAI,YACZ,IAAIK,EAAUjB,KACdkB,IAAMC,IAAI,oCACTC,KAAK,SAAUC,GAEdV,QAAQC,IAAI,YAAaS,EAASP,MAClCG,EAAQK,SAAS,CAACR,KAAMO,EAASP,KAAMC,YAAY,MAEpDQ,MAAM,SAAUC,GAEfb,QAAQC,IAAI,UAAWY,KAExBJ,KAAK,+CAsBC,IAAAK,EAAAzB,KACP,OACEA,KAAKa,MAAME,WACX3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoD,EAAD,CAAMC,IAAK,SAAAA,GAAG,OAAIF,EAAKrB,IAAMuB,GAAKtC,MAAOW,KAAKa,MAAMC,QAGtD1C,EAAAC,EAAAC,cAAA,qCArD4B+B,IAAMuB,WCGzBC,MANf,WACE,OACEzD,EAAAC,EAAAC,cAACwD,EAAD,OCMgBC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.117c92b6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst formatDate = (date) => {\r\n  date = new Date(date);\r\n  let now = new Date(Date.now());\r\n  let oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds\r\n  let oneHour = 60*60*1000; // minutes*seconds*milliseconds\r\n  let oneMinute = 60*1000; // seconds*milliseconds\r\n  let oneSecond = 1000; // milliseconds\r\n  let diffDays = Math.round((now.getTime() - date.getTime())/oneDay); //Get the time (milliseconds since January 1, 1970)\r\n  if(diffDays == 0) {\r\n    diffDays = Math.round((now.getTime() - date.getTime())/oneHour);\r\n    if(diffDays == 0){\r\n      diffDays = Math.round((now.getTime() - date.getTime())/oneMinute);\r\n      if(diffDays == 1) return diffDays = diffDays + \" minute ago\";\r\n      return diffDays == 0 ? \"now\" : diffDays = diffDays + \" minutes ago\";\r\n    }\r\n    return diffDays == 1 ? diffDays = diffDays + \" hour ago\" : diffDays = diffDays + \" hours ago\";\r\n  }\r\n  else if(diffDays > 6){\r\n    return diffDays = date.getDate() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getFullYear();\r\n  }\r\n  else return diffDays == 1 ? diffDays = diffDays + \" day ago\": diffDays = diffDays + \" days ago\";\r\n}\r\n\r\nconst ListItem = ({ item }) => (\r\n  <li>\r\n    Date: {formatDate(item.date)} <br />\r\n    Price: {item.price} <br />\r\n    Face: {item.face}\r\n  </li>\r\n);\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport ListItem from './ListItem';\r\n\r\nconst List = ({ items }) => (\r\n  <ul>\r\n    {items.map( (item) => <ListItem key={item.id} item={item} />)}\r\n  </ul>\r\n);\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport List from '../reusables/List';\r\n\r\nlet lastScrollY = 0;\r\nlet ticking = false;\r\n\r\nexport default class Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [{price: 150, date: 123123, face: \"$@#(&$\"}],\r\n      pageLoaded: false,\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    \r\n    window.addEventListener('scroll', this.handleScroll);\r\n    console.log(\"otr lale\")\r\n    let pointer = this;\r\n    axios.get('/api/products?_page=10&_limit=15')\r\n    .then(function (response) {\r\n      // handle success\r\n      console.log(\"kjsadkjad\", response.data);\r\n      pointer.setState({data: response.data, pageLoaded: true})\r\n    })\r\n    .catch(function (error) {\r\n      // handle error\r\n      console.log(\"error: \", error);\r\n    })\r\n    .then(function () {\r\n      // always executed\r\n    });\r\n    \r\n  }\r\n\r\n  nav = React.createRef();\r\n\r\n  handleScroll = () => {\r\n    lastScrollY = window.scrollY;\r\n\r\n    if (!ticking) {\r\n      window.requestAnimationFrame(() => {\r\n        console.log(\"lalalalalla\")\r\n        // this.nav.current.style.top = `${lastScrollY}px`;\r\n        ticking = false;\r\n      });\r\n   \r\n      ticking = true;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      this.state.pageLoaded ? \r\n      <div>\r\n        <List ref={ref => this.nav = ref} items={this.state.data} />\r\n      </div>\r\n      :\r\n      <div>\r\n        Testing testing\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Home from \"./views/Home\";\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}