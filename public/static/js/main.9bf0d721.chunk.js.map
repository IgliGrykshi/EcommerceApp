{"version":3,"sources":["reusables/ListItem.js","reusables/List.js","reusables/Loader.js","reusables/Select.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","_ref","item","react_default","a","createElement","className","style","fontSize","size","face","price","date","Date","now","diffDays","Math","round","getTime","getDate","getMonth","getFullYear","formatDate","List","items","map","index","reusables_ListItem","key","id","src","floor","random","Loader","role","Select","handleChange","value","handleClick","onChange","event","selected","type","onClick","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getItems","page","sortBy","pointer","assertThisInitialized","url","concat","axios","get","then","response","console","log","data","currentData","state","push","apply","toConsumableArray","setState","loading","pageLoaded","sortHasChanged","catch","error","sortPlaceholder","target","sort","window","onscroll","ev","innerHeight","scrollY","document","body","offsetHeight","length","_this2","reusables_Select","reusables_List","reusables_Loader","React","Component","App","Home_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bf0d721.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst formatDate = (date) => {\r\n  date = new Date(date); // save date as a Date type of data\r\n  let now = new Date(Date.now()); // get current time\r\n  let oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds\r\n  let oneHour = 60*60*1000; // minutes*seconds*milliseconds\r\n  let oneMinute = 60*1000; // seconds*milliseconds\r\n  let oneSecond = 1000; // \r\n   // getTime-Gets the time in milliseconds since January 1, 1970\r\n   // subtract current time from given date and divide by number of milliseconds in one day\r\n   // round up the result to get the exact number of days that have passed\r\n   // if result = 0 repeat the process to find number of hours/minutes that have passed\r\n   // show 'now' if the product has been added less than 1 minute ago\r\n  let diffDays = Math.round((now.getTime() - date.getTime())/oneDay);\r\n  if(diffDays == 0) {\r\n    diffDays = Math.round((now.getTime() - date.getTime())/oneHour);\r\n    if(diffDays == 0){\r\n      diffDays = Math.round((now.getTime() - date.getTime())/oneMinute);\r\n      if(diffDays == 1) return diffDays = diffDays + \" minute ago\";\r\n      return diffDays == 0 ? \"now\" : diffDays = diffDays + \" minutes ago\";\r\n    }\r\n    return diffDays == 1 ? diffDays = diffDays + \" hour ago\" : diffDays = diffDays + \" hours ago\";\r\n  }\r\n  else if(diffDays > 6){\r\n    return diffDays = date.getDate() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getFullYear();\r\n  }\r\n  else return diffDays == 1 ? diffDays = diffDays + \" day ago\": diffDays = diffDays + \" days ago\";\r\n}\r\n\r\nconst ListItem = ({ item }) => (\r\n  <li>\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\" style={{fontSize: item.size}}>{item.face}</h5>\r\n        <p className=\"card-text\">${item.price/100}</p>\r\n        <p className=\"card-text\">{formatDate(item.date)}</p>\r\n      </div>\r\n    </div>\r\n  </li>\r\n);\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport ListItem from './ListItem';\r\n// import '../App.css';\r\n\r\nconst adUrl = () => {\r\n  return \"/ads/?r=\" + Math.floor(Math.random()*1000);\r\n}\r\n\r\nconst List = ({ items }) => (\r\n  // Create list of products and show an ad every 20 products.\r\n  // Show 'end of catalogue' when there are no more products to fetch\r\n  <ol className=\"noBullets\">\r\n    {items.map( (item, index) => {\r\n      return <div>\r\n        <ListItem key={item.id} item={item} />\r\n        {(index+1) % 20 == 0 ? <img className=\"ad\" src={adUrl()}/> : \"\"}\r\n        {index == 499 ? <div className=\"alignCenter mb10\">~ end of catalogue ~</div> : \"\"}\r\n      </div>\r\n    })}\r\n  </ol>\r\n);\r\n\r\nexport default List;\r\n","import React from 'react';\r\n\r\nconst Loader = () => (\r\n  <div className=\"spinner-grow mb10\" role=\"status\">\r\n    <span className=\"sr-only\">Loading...</span>\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\n\r\nconst Select = ({ handleChange, value, handleClick }) => (\r\n  <div className=\"input-group mb10\">\r\n    <select className=\"custom-select\"  value={value} onChange={(event) => handleChange(event)}>\r\n      <option selected value=\"none\">Sort by...</option>\r\n      <option value=\"price\">Price</option>\r\n      <option value=\"size\">Size</option>\r\n      <option value=\"id\">ID</option>\r\n    </select>\r\n    <div className=\"input-group-append\">\r\n      <button className=\"btn btn-success\" type=\"button\" onClick={() => handleClick()} >Sort</button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Select;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport List from '../reusables/List';\r\nimport Loader from '../reusables/Loader';\r\nimport Select from '../reusables/Select';\r\n\r\nexport default class Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      loading: true,\r\n      pageLoaded: false,\r\n      page: 1,\r\n      sort: \"none\",\r\n      sortPlaceholder: \"none\",\r\n      sortHasChanged: false,\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    let pointer = this;\r\n    // Fetch new items when page reaches bottom\r\n    window.onscroll = (ev) => {\r\n      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && !pointer.state.loading && pointer.state.data.length < 500) {\r\n          // you're at the bottom of the page\r\n          pointer.setState({loading: true, page: pointer.state.page + 1}, () => {\r\n            pointer.getItems(pointer.state.page, pointer.state.sort);\r\n          });\r\n      }\r\n    };\r\n    // Fetch first batch of products\r\n    this.getItems(this.state.page, this.state.sort);\r\n    \r\n  }\r\n\r\n  getItems = (page, sortBy) => {\r\n    let pointer = this;\r\n    // Set url based on fetch requirements from user\r\n    let url = sortBy == \"none\" ? `/api/products?_page=${page}&_limit=20` : `/api/products?_page=${page}&_limit=20&_sort=${sortBy}`;\r\n    axios.get(url)\r\n    .then((response) => {\r\n      // handle success\r\n      console.log(\"kjsadkjad\", response.data, response);\r\n      let currentData = pointer.state.data;\r\n      currentData.push(...response.data)\r\n      pointer.setState({data: currentData, loading: false, pageLoaded: true, sortHasChanged: false})\r\n    })\r\n    .catch((error) => {\r\n      // handle error\r\n      console.log(\"error: \", error);\r\n    })\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    // Set Select placeholder value\r\n    this.setState({sortPlaceholder: event.target.value});\r\n  }\r\n\r\n  handleClick = () => {\r\n    let pointer = this;\r\n    // Fetch items based on the users sort choice\r\n    this.setState({sort: this.state.sortPlaceholder, loading: true, data: [], page: 1}, () => {\r\n      pointer.getItems(pointer.state.page, pointer.state.sort)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Add loader if first batch of products hasnt been fetched yet\r\n      this.state.pageLoaded ?\r\n      <div className=\"alignCenter\">\r\n        <Select \r\n          value={this.state.sortPlaceholder}\r\n          handleChange={(event) => this.handleChange(event)}\r\n          handleClick={() =>this.handleClick()}\r\n        />\r\n        <List items={this.state.data} />\r\n        {this.state.data.length < 500 ? this.state.loading ? \r\n        // Add loader when fetching new products by scroll\r\n          <Loader />\r\n        :\r\n        \"\"\r\n        :\r\n        null\r\n        }\r\n      </div>\r\n      :\r\n      <div className=\"alignCenter\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Home from \"./views/Home\";\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}